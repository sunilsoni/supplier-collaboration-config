spring:
  profiles:
    active: development
---
# Datasource and JPA configuration to be used for using the same tokenstore as the authorization server for
# the defined resource server. Note that there can't be 2 different root nodes, so datasource falls under the "spring" node.
spring:
  profiles: development
  datasource:
    url: jdbc:mysql://localhost:3306/apiAuth
    username: root
    password: root
    driver-class: com.mysql.jdbc.Driver

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: false
    hibernate:
      ddl-auto: create
  aop:
    proxy-target-class: true
# Define the port where the API gateway server would be running
server:
  port: 8765

# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that 
# Spring cloud security would need to secure the api gateway before it can route the 
# requests using zuul
zuul:
  routes:
    item-service: /api/item/**
    asn-service: /api/asn/**
    po-service: /api/po/**
    web-portal: /**
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

---

# Datasource and JPA configuration to be used for using the same tokenstore as the authorization server for
# the defined resource server. Note that there can't be 2 different root nodes, so datasource falls under the "spring" node.
spring:
  profiles: cloud
  datasource:
    url: jdbc:mysql://us-cdbr-azure-east2-d.cloudapp.net:3306/suppcolldb
    username: b99a4275db01c8
    password: 23b35e59
    driver-class: com.mysql.jdbc.Driver

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: false
    hibernate:
      ddl-auto: create
  aop:
    proxy-target-class: true
# Define the port where the API gateway server would be running
server:
  port: 8765


# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that 
# Spring cloud security would need to secure the api gateway before it can route the 
# requests using zuul
zuul:
  routes:
    item-service: /api/item/**
    asn-service: /api/asn/**
    po-service: /api/po/**
    web-portal: /**
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/  
